<h1 class="page-title">Personalize your Cover Letter and Video Pitch</h1>
<h2 class="page-subtitle">
  Select options which are most suitable for the application to get fully personalized cover letter and video pitch
</h2>

<div class="container-fluid">
  <div class="row justify-content-center">
    <div class="col-12 col-lg-8 col-xl-6">
      <%= form_with url: trait_application_path(@application),
                    method: :patch,
                    local: true,
                    html: { id: "traitForm", class: "trait-form" } do |f| %>

        <div class="border rounded p-4 mb-4">
          <div class="mb-4">
            <label for="trait_choice1" class="form-label h6 mb-3">What tone do you want for your Cover Letter and Video Pitch?</label>
            <%= select_tag :trait_choice1,
                  options_for_select([
                    ["Select the tone...", ""],
                    "Professional and formal",
                    "Friendly and approachable",
                    "Confident and assertive",
                    "Enthusiastic and energetic"
                  ]),
                  id: "trait_choice1",
                  required: true,
                  class: "form-select" %>
          </div>

          <div class="mb-4">
            <label for="trait_choice2" class="form-label h6 mb-3">Which primary professional strength do you want to highlight?</label>
            <%= select_tag :trait_choice2,
                  options_for_select([
                    ["Select your primary professional strength...", ""],
                    "Technical expertise and problem-solving",
                    "Leadership and team management",
                    "Communication and collaboration",
                    "Innovation and creative thinking",
                    "Analytical and data-driven approach",
                    "Other"
                  ]),
                  id: "trait_choice2",
                  required: true,
                  class: "form-select mb-2" %>

            <%= text_field_tag :trait_choice2_other, "",
                  placeholder: "Please specify...",
                  id: "trait_choice2_other",
                  style: "display:none;",
                  class: "form-control mt-2" %>
          </div>

          <div class="mb-4">
            <label for="trait_choice3" class="form-label h6 mb-3">How would you describe your experience level in this field?</label>
            <%= select_tag :trait_choice3,
                  options_for_select([
                    ["Select your experience level...", ""],
                    "Entry level (0–2 years)",
                    "Mid-level (3–5 years)",
                    "Senior level (6–10 years)",
                    "Expert level (10+ years)"
                  ]),
                  id: "trait_choice3",
                  required: true,
                  class: "form-select" %>
          </div>

          <div class="mb-4">
            <label for="trait_choice4" class="form-label h6 mb-3">What motivates you most in your career?</label>
            <%= select_tag :trait_choice4,
                  options_for_select([
                    ["Select your motivation...", ""],
                    "Professional growth and learning",
                    "Making a meaningful impact",
                    "Solving complex challenges",
                    "Working with great teams",
                    "Building innovative solutions",
                    "Other"
                  ]),
                  id: "trait_choice4",
                  required: true,
                  class: "form-select mb-2" %>

            <%= text_field_tag :trait_choice4_other, "",
                  placeholder: "Please specify...",
                  id: "trait_choice4_other",
                  style: "display:none;",
                  class: "form-control mt-2" %>
          </div>
        </div>

        <div class="d-flex flex-column align-items-center my-4">
          <%= f.submit "Save and Continue →",
                id: "nextBtn",
                class: "btn btn-primary px-4 py-2" %>
          <p id="formError" class="text-danger mt-2" style="display:none;">
            Please fill in all required fields.
          </p>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
  function setupOtherToggle(selectId, inputId) {
    const dd  = document.getElementById(selectId);
    const box = document.getElementById(inputId);
    if (!dd || !box) return;

    const toggle = () => {
      if (dd.value === "Other") {
        box.style.display = "block";
      } else {
        box.style.display = "none";
        box.value = "";
      }
    };

    dd.addEventListener("change", toggle);
    toggle();
  }

  function setupGate() {
    const form    = document.getElementById("traitForm");
    if (!form) return;

    const selects = [
      document.getElementById("trait_choice1"),
      document.getElementById("trait_choice2"),
      document.getElementById("trait_choice3"),
      document.getElementById("trait_choice4")
    ];
    const otherMap = {
      trait_choice2: document.getElementById("trait_choice2_other"),
      trait_choice4: document.getElementById("trait_choice4_other")
    };

    const nextBtn   = document.getElementById("nextBtn");
    const errorLine = document.getElementById("formError");

    function valid() {
      for (const s of selects) {
        if (!s || !s.value || s.value.trim() === "") return false;
      }
      for (const key in otherMap) {
        const s = document.getElementById(key);
        const t = otherMap[key];
        if (s && t && s.value === "Other" && (!t.value || t.value.trim() === "")) {
          return false;
        }
      }
      return true;
    }

    function updateButton() {
      if (valid()) {
        nextBtn.disabled = false;
        nextBtn.classList.remove("disabled");
        nextBtn.classList.remove("btn-secondary");
        nextBtn.classList.remove("btn-primary");
        nextBtn.classList.add("btn-success");
        errorLine.style.display = "none";
      } else {
        nextBtn.disabled = true;
        nextBtn.classList.add("disabled");
        nextBtn.classList.remove("btn-success");
        nextBtn.classList.add("btn-secondary");
      }
    }

    const watch = [ ...selects, ...Object.values(otherMap) ].filter(Boolean);
    watch.forEach(el => {
      el.addEventListener("input", updateButton);
      el.addEventListener("change", updateButton);
    });

    form.addEventListener("submit", (e) => {
      if (!valid()) {
        e.preventDefault();
        errorLine.style.display = "block";
      }
    });

    updateButton();
  }

  document.addEventListener("turbo:load", () => {
    setupOtherToggle("trait_choice2", "trait_choice2_other");
    setupOtherToggle("trait_choice4", "trait_choice4_other");
    setupGate();
  });

  document.addEventListener("DOMContentLoaded", () => {
    setupOtherToggle("trait_choice2", "trait_choice2_other");
    setupOtherToggle("trait_choice4", "trait_choice4_other");
    setupGate();
  });
</script>
